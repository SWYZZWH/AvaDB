import constant


class FieldNameProcessor:
    """
        a field name consists of 3 parts: prefix + base_name + suffix
        prefix:
            Prefix is used to differentiate columns in different tables.
            It's useful for joining and subquery. (Suppose both table A and B have a column "a", how to distinguish?)
            Two different types of prefix are supported: relative prefix and absolute prefix.
            1. Relative prefix is used for user queries and expression_tree. (as user have no idea about the temporary tables we create).
                Syntax for relative prefix is like "0::a", It means user is referring to the value of column 'a' of the first table in src_tables
                It can be nested, e.g. "0::1::a", which should be parsed recursively.
            2. Absolute prefix is used for storing the table.
                Suppose we have a table C which is generated by A join B. We have to rename all field names by adding a prefix.
                The prefix should be the table name (which is unique global wide).
                Thus, property a in both A and B will be renamed as "A::a" and "B::a" after joining.
                The renaming solves a lot of naming collision problems
            3. Mixed prefix is also supported for a certain use case
                For users, they can write queries with nested relative prefix e.g. "0::1::a"
                For query parser, it always parse and calculate all the tables in src_tables for each query (including tables generated by joining or subquery).
                For a table C generated by joining A and B, the column name is already changed as "A::a" and "B::a". However user refers to "C::B::a" with "0::1::a".
                For the expression tree, it only support handle the outer most level of the prefix. i.e. "0::".
                Thus, we must rename "1::" to "B::" in query parer i.e. rewrite the reference from "0::1::a" to "0::B::a". (mixed mode)
        base_name:
            The column name we give when we create the table(for sql), or create the record (for nosql)
            For nosql, there is a special rule:
                TODO: json flattener and constructor
                To eliminate the difference between sql and nosql, the nosql records will be flattened when loaded into memory:
                    e.g. for record {"a": {"b": 1}} will be flattened as {"a.b": 1}.
                It benefits most scenarios except for updating, which will be more complicated.
        suffix: used for group by aggregators including min,max,sum,avg,count. "__" is used for separator, e.g. a__AVG, a__COUNT
    """

    @staticmethod
    def get_suffix(name: str) -> str:
        if constant.REDUCED_COLUMN_NAME_SEP not in name:
            return ""
        return name.split(constant.REDUCED_COLUMN_NAME_SEP)[-1]

    @staticmethod
    def get_prefix(name: str) -> str:
        if constant.QUERY_FIELD_REF_SYM not in name:
            return ""
        return constant.QUERY_FIELD_REF_SYM.join(name.split(constant.QUERY_FIELD_REF_SYM)[:-1])

    @staticmethod
    def add_prefix(name: str, prefix: str) -> str:
        return constant.QUERY_FIELD_REF_SYM.join([prefix, name])

    @staticmethod
    def remove_outer_prefix(name: str) -> str:
        if constant.QUERY_FIELD_REF_SYM not in name:
            return name
        return constant.QUERY_FIELD_REF_SYM.join(name.split(constant.QUERY_FIELD_REF_SYM)[1:])

    @staticmethod
    def get_inner_prefix(name: str) -> str:
        if constant.QUERY_FIELD_REF_SYM not in name:
            return ""
        return FieldNameProcessor.get_prefix(FieldNameProcessor.remove_outer_prefix(name))

    @staticmethod
    def replace_inner_prefix(name: str, new_inner_prefix: str) -> str:
        if constant.QUERY_FIELD_REF_SYM not in name:
            return name

        return FieldNameProcessor.add_prefix(FieldNameProcessor.add_prefix(FieldNameProcessor.get_base_name(name), new_inner_prefix), FieldNameProcessor.get_outer_prefix(name))

    @staticmethod
    def remove_prefix(name: str) -> str:
        if constant.QUERY_FIELD_REF_SYM not in name:
            return name
        return name.split(constant.QUERY_FIELD_REF_SYM)[-1]

    @staticmethod
    def remove_suffix(name: str) -> str:
        if constant.REDUCED_COLUMN_NAME_SEP not in name:
            return name
        return name.split(constant.REDUCED_COLUMN_NAME_SEP)[0]

    @staticmethod
    def get_base_name(name: str) -> str:
        return FieldNameProcessor.remove_prefix(name).split(constant.REDUCED_COLUMN_NAME_SEP)[0]

    @staticmethod
    def get_outer_prefix(name: str) -> str:
        if constant.QUERY_FIELD_REF_SYM not in name:
            return ""
        return name.split(constant.QUERY_FIELD_REF_SYM)[0]


class FieldInfo:

    def __init__(self, name: str, value_type: str):
        self.name = name
        self.value_type = value_type

    def get_name(self) -> str:
        return self.name

    def get_value_type(self) -> str:
        return self.value_type

    def __str__(self) -> str:
        return "name: {}, type: {}".format(self.get_name(), self.get_value_type())

    def __repr__(self) -> str:
        return self.__str__()

    def __eq__(self, other: 'FieldInfo') -> bool:
        return self.name == other.name and self.value_type == other.value_type

    def __ne__(self, other: 'FieldInfo') -> bool:
        return not self.__eq__(other)


if __name__ == "__main__":
    assert FieldNameProcessor.remove_prefix("A::a") == "a"
    assert FieldNameProcessor.remove_prefix("0::a") == "a"
    assert FieldNameProcessor.remove_prefix("1::0::a") == "a"
    assert FieldNameProcessor.remove_prefix("1::A::a") == "a"
    assert FieldNameProcessor.remove_prefix("1::A::") == ""

    assert FieldNameProcessor.add_prefix("A::a", "1") == "1::A::a"
    assert FieldNameProcessor.add_prefix("a", "1") == "1::a"

    assert FieldNameProcessor.remove_outer_prefix("1::A::a") == "A::a"
    assert FieldNameProcessor.remove_outer_prefix("a") == ""

    assert FieldNameProcessor.get_prefix("A::a") == "A"
    assert FieldNameProcessor.get_prefix("1::A::a") == "1::A"
    assert FieldNameProcessor.get_prefix("1::A::") == "1::A"
    assert FieldNameProcessor.get_prefix("1::A::") == "1::A"
    assert FieldNameProcessor.get_prefix("::") == ""
    assert FieldNameProcessor.get_prefix("") == ""

    assert FieldNameProcessor.get_base_name("1::A::a") == "a"
    assert FieldNameProcessor.get_base_name("1::A::") == ""
    assert FieldNameProcessor.get_base_name("1::A::a__MIN") == "a"
    assert FieldNameProcessor.get_base_name("a__MIN") == "a"
    assert FieldNameProcessor.get_base_name("aa__MIN") == "aa"
    assert FieldNameProcessor.get_base_name("0::1::aa__MIN") == "aa"
